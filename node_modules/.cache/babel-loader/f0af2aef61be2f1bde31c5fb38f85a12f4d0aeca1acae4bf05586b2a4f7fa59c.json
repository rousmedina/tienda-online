{"ast":null,"code":"/**\n * Payment Service - Manejo de pagos\n *\n * NOTA: Esta es una implementación de DEMO.\n * Para producción, debes integrar una pasarela de pago real como:\n * - Niubiz (VisaNet Perú)\n * - Culqi (Perú)\n * - Stripe (Internacional)\n * - PayPal\n */\n\n/**\n * Validar número de tarjeta usando algoritmo de Luhn\n */\nexport const validateCardNumber = cardNumber => {\n  // Remover espacios y guiones\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n\n  // Validar que solo sean números\n  if (!/^\\d+$/.test(cleaned)) {\n    return false;\n  }\n\n  // Validar longitud (13-19 dígitos)\n  if (cleaned.length < 13 || cleaned.length > 19) {\n    return false;\n  }\n\n  // Algoritmo de Luhn\n  let sum = 0;\n  let isEven = false;\n  for (let i = cleaned.length - 1; i >= 0; i--) {\n    let digit = parseInt(cleaned.charAt(i), 10);\n    if (isEven) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n    sum += digit;\n    isEven = !isEven;\n  }\n  return sum % 10 === 0;\n};\n\n/**\n * Validar fecha de expiración\n */\nexport const validateExpirationDate = expDate => {\n  // Formato esperado: MM/AA\n  const regex = /^(0[1-9]|1[0-2])\\/(\\d{2})$/;\n  if (!regex.test(expDate)) {\n    return false;\n  }\n  const [month, year] = expDate.split('/');\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear() % 100; // Últimos 2 dígitos\n  const currentMonth = currentDate.getMonth() + 1;\n  const expYear = parseInt(year, 10);\n  const expMonth = parseInt(month, 10);\n\n  // Validar que no esté expirada\n  if (expYear < currentYear || expYear === currentYear && expMonth < currentMonth) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Validar CVV\n */\nexport const validateCVV = cvv => {\n  // CVV debe ser 3 o 4 dígitos\n  const regex = /^\\d{3,4}$/;\n  return regex.test(cvv);\n};\n\n/**\n * Obtener tipo de tarjeta basado en el número\n */\nexport const getCardType = cardNumber => {\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n\n  // Visa\n  if (/^4/.test(cleaned)) {\n    return 'visa';\n  }\n\n  // Mastercard\n  if (/^5[1-5]/.test(cleaned) || /^2[2-7]/.test(cleaned)) {\n    return 'mastercard';\n  }\n\n  // American Express\n  if (/^3[47]/.test(cleaned)) {\n    return 'amex';\n  }\n\n  // Diners Club\n  if (/^3(?:0[0-5]|[68])/.test(cleaned)) {\n    return 'diners';\n  }\n  return 'unknown';\n};\n\n/**\n * Formatear número de tarjeta (enmascara todos excepto últimos 4 dígitos)\n */\nexport const maskCardNumber = cardNumber => {\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n  const lastFour = cleaned.slice(-4);\n  return `**** **** **** ${lastFour}`;\n};\n\n/**\n * Procesar pago con tarjeta (DEMO)\n * En producción, esto se comunicaría con la API de la pasarela de pago\n */\nexport const processCardPayment = async paymentData => {\n  const {\n    cardNumber,\n    cardName,\n    expirationDate,\n    cvv,\n    amount\n  } = paymentData;\n\n  // Validaciones\n  if (!validateCardNumber(cardNumber)) {\n    return {\n      success: false,\n      error: 'Número de tarjeta inválido'\n    };\n  }\n  if (!validateExpirationDate(expirationDate)) {\n    return {\n      success: false,\n      error: 'Fecha de expiración inválida o tarjeta expirada'\n    };\n  }\n  if (!validateCVV(cvv)) {\n    return {\n      success: false,\n      error: 'CVV inválido'\n    };\n  }\n\n  // Simular delay de procesamiento (en producción sería una llamada API real)\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // DEMO: Simular éxito (90% de probabilidad)\n  const isSuccess = Math.random() > 0.1;\n  if (isSuccess) {\n    return {\n      success: true,\n      transactionId: `TXN-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      amount,\n      cardType: getCardType(cardNumber),\n      maskedCard: maskCardNumber(cardNumber),\n      timestamp: new Date().toISOString()\n    };\n  } else {\n    return {\n      success: false,\n      error: 'Pago rechazado. Por favor, intenta con otra tarjeta.'\n    };\n  }\n};\n\n/**\n * Procesar pago con Yape/Plin (DEMO)\n * En producción, generarías un QR o redirigirías a la app\n */\nexport const processDigitalWalletPayment = async (paymentMethod, amount, phoneNumber) => {\n  // Validar número de teléfono peruano\n  const phoneRegex = /^9\\d{8}$/;\n  if (phoneNumber && !phoneRegex.test(phoneNumber)) {\n    return {\n      success: false,\n      error: 'Número de teléfono inválido'\n    };\n  }\n\n  // Simular delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n  return {\n    success: true,\n    transactionId: `${paymentMethod.toUpperCase()}-${Date.now()}`,\n    amount,\n    paymentMethod,\n    phoneNumber,\n    timestamp: new Date().toISOString(),\n    qrCode: `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${paymentMethod}-payment-${Date.now()}`\n  };\n};\n\n/**\n * Validar datos de pago completos\n */\nexport const validatePaymentData = formData => {\n  const errors = {};\n  if (formData.metodoPago === 'tarjeta') {\n    if (!formData.numeroTarjeta || !validateCardNumber(formData.numeroTarjeta)) {\n      errors.numeroTarjeta = 'Número de tarjeta inválido';\n    }\n    if (!formData.nombreTarjeta || formData.nombreTarjeta.trim().length < 3) {\n      errors.nombreTarjeta = 'Nombre en tarjeta inválido';\n    }\n    if (!formData.fechaExpiracion || !validateExpirationDate(formData.fechaExpiracion)) {\n      errors.fechaExpiracion = 'Fecha de expiración inválida';\n    }\n    if (!formData.cvv || !validateCVV(formData.cvv)) {\n      errors.cvv = 'CVV inválido';\n    }\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["validateCardNumber","cardNumber","cleaned","replace","test","length","sum","isEven","i","digit","parseInt","charAt","validateExpirationDate","expDate","regex","month","year","split","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","expYear","expMonth","validateCVV","cvv","getCardType","maskCardNumber","lastFour","slice","processCardPayment","paymentData","cardName","expirationDate","amount","success","error","Promise","resolve","setTimeout","isSuccess","Math","random","transactionId","now","toString","substr","cardType","maskedCard","timestamp","toISOString","processDigitalWalletPayment","paymentMethod","phoneNumber","phoneRegex","toUpperCase","qrCode","validatePaymentData","formData","errors","metodoPago","numeroTarjeta","nombreTarjeta","trim","fechaExpiracion","isValid","Object","keys"],"sources":["C:/Users/Usuario/OneDrive/Desktop/proyecto/chinasaqra-demo/src/services/paymentService.js"],"sourcesContent":["/**\n * Payment Service - Manejo de pagos\n *\n * NOTA: Esta es una implementación de DEMO.\n * Para producción, debes integrar una pasarela de pago real como:\n * - Niubiz (VisaNet Perú)\n * - Culqi (Perú)\n * - Stripe (Internacional)\n * - PayPal\n */\n\n/**\n * Validar número de tarjeta usando algoritmo de Luhn\n */\nexport const validateCardNumber = (cardNumber) => {\n  // Remover espacios y guiones\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n\n  // Validar que solo sean números\n  if (!/^\\d+$/.test(cleaned)) {\n    return false;\n  }\n\n  // Validar longitud (13-19 dígitos)\n  if (cleaned.length < 13 || cleaned.length > 19) {\n    return false;\n  }\n\n  // Algoritmo de Luhn\n  let sum = 0;\n  let isEven = false;\n\n  for (let i = cleaned.length - 1; i >= 0; i--) {\n    let digit = parseInt(cleaned.charAt(i), 10);\n\n    if (isEven) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n\n    sum += digit;\n    isEven = !isEven;\n  }\n\n  return sum % 10 === 0;\n};\n\n/**\n * Validar fecha de expiración\n */\nexport const validateExpirationDate = (expDate) => {\n  // Formato esperado: MM/AA\n  const regex = /^(0[1-9]|1[0-2])\\/(\\d{2})$/;\n\n  if (!regex.test(expDate)) {\n    return false;\n  }\n\n  const [month, year] = expDate.split('/');\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear() % 100; // Últimos 2 dígitos\n  const currentMonth = currentDate.getMonth() + 1;\n\n  const expYear = parseInt(year, 10);\n  const expMonth = parseInt(month, 10);\n\n  // Validar que no esté expirada\n  if (expYear < currentYear || (expYear === currentYear && expMonth < currentMonth)) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Validar CVV\n */\nexport const validateCVV = (cvv) => {\n  // CVV debe ser 3 o 4 dígitos\n  const regex = /^\\d{3,4}$/;\n  return regex.test(cvv);\n};\n\n/**\n * Obtener tipo de tarjeta basado en el número\n */\nexport const getCardType = (cardNumber) => {\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n\n  // Visa\n  if (/^4/.test(cleaned)) {\n    return 'visa';\n  }\n\n  // Mastercard\n  if (/^5[1-5]/.test(cleaned) || /^2[2-7]/.test(cleaned)) {\n    return 'mastercard';\n  }\n\n  // American Express\n  if (/^3[47]/.test(cleaned)) {\n    return 'amex';\n  }\n\n  // Diners Club\n  if (/^3(?:0[0-5]|[68])/.test(cleaned)) {\n    return 'diners';\n  }\n\n  return 'unknown';\n};\n\n/**\n * Formatear número de tarjeta (enmascara todos excepto últimos 4 dígitos)\n */\nexport const maskCardNumber = (cardNumber) => {\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n  const lastFour = cleaned.slice(-4);\n  return `**** **** **** ${lastFour}`;\n};\n\n/**\n * Procesar pago con tarjeta (DEMO)\n * En producción, esto se comunicaría con la API de la pasarela de pago\n */\nexport const processCardPayment = async (paymentData) => {\n  const { cardNumber, cardName, expirationDate, cvv, amount } = paymentData;\n\n  // Validaciones\n  if (!validateCardNumber(cardNumber)) {\n    return {\n      success: false,\n      error: 'Número de tarjeta inválido'\n    };\n  }\n\n  if (!validateExpirationDate(expirationDate)) {\n    return {\n      success: false,\n      error: 'Fecha de expiración inválida o tarjeta expirada'\n    };\n  }\n\n  if (!validateCVV(cvv)) {\n    return {\n      success: false,\n      error: 'CVV inválido'\n    };\n  }\n\n  // Simular delay de procesamiento (en producción sería una llamada API real)\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // DEMO: Simular éxito (90% de probabilidad)\n  const isSuccess = Math.random() > 0.1;\n\n  if (isSuccess) {\n    return {\n      success: true,\n      transactionId: `TXN-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      amount,\n      cardType: getCardType(cardNumber),\n      maskedCard: maskCardNumber(cardNumber),\n      timestamp: new Date().toISOString()\n    };\n  } else {\n    return {\n      success: false,\n      error: 'Pago rechazado. Por favor, intenta con otra tarjeta.'\n    };\n  }\n};\n\n/**\n * Procesar pago con Yape/Plin (DEMO)\n * En producción, generarías un QR o redirigirías a la app\n */\nexport const processDigitalWalletPayment = async (paymentMethod, amount, phoneNumber) => {\n  // Validar número de teléfono peruano\n  const phoneRegex = /^9\\d{8}$/;\n\n  if (phoneNumber && !phoneRegex.test(phoneNumber)) {\n    return {\n      success: false,\n      error: 'Número de teléfono inválido'\n    };\n  }\n\n  // Simular delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  return {\n    success: true,\n    transactionId: `${paymentMethod.toUpperCase()}-${Date.now()}`,\n    amount,\n    paymentMethod,\n    phoneNumber,\n    timestamp: new Date().toISOString(),\n    qrCode: `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${paymentMethod}-payment-${Date.now()}`\n  };\n};\n\n/**\n * Validar datos de pago completos\n */\nexport const validatePaymentData = (formData) => {\n  const errors = {};\n\n  if (formData.metodoPago === 'tarjeta') {\n    if (!formData.numeroTarjeta || !validateCardNumber(formData.numeroTarjeta)) {\n      errors.numeroTarjeta = 'Número de tarjeta inválido';\n    }\n\n    if (!formData.nombreTarjeta || formData.nombreTarjeta.trim().length < 3) {\n      errors.nombreTarjeta = 'Nombre en tarjeta inválido';\n    }\n\n    if (!formData.fechaExpiracion || !validateExpirationDate(formData.fechaExpiracion)) {\n      errors.fechaExpiracion = 'Fecha de expiración inválida';\n    }\n\n    if (!formData.cvv || !validateCVV(formData.cvv)) {\n      errors.cvv = 'CVV inválido';\n    }\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}