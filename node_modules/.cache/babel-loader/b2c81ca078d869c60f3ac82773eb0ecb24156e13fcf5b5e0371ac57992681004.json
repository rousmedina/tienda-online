{"ast":null,"code":"/**\n * Payment Service - Manejo de pagos\n *\n * NOTA: Esta es una implementación de DEMO.\n * Para producción, debes integrar una pasarela de pago real como:\n * - Niubiz (VisaNet Perú)\n * - Culqi (Perú)\n * - Stripe (Internacional)\n * - PayPal\n *//**\n * Validar número de tarjeta usando algoritmo de Luhn\n */export const validateCardNumber=cardNumber=>{// Remover espacios y guiones\nconst cleaned=cardNumber.replace(/[\\s-]/g,'');// Validar que solo sean números\nif(!/^\\d+$/.test(cleaned)){return false;}// Validar longitud (13-19 dígitos)\nif(cleaned.length<13||cleaned.length>19){return false;}// Algoritmo de Luhn\nlet sum=0;let isEven=false;for(let i=cleaned.length-1;i>=0;i--){let digit=parseInt(cleaned.charAt(i),10);if(isEven){digit*=2;if(digit>9){digit-=9;}}sum+=digit;isEven=!isEven;}return sum%10===0;};/**\n * Validar fecha de expiración\n */export const validateExpirationDate=expDate=>{// Formato esperado: MM/AA\nconst regex=/^(0[1-9]|1[0-2])\\/(\\d{2})$/;if(!regex.test(expDate)){return false;}const[month,year]=expDate.split('/');const currentDate=new Date();const currentYear=currentDate.getFullYear()%100;// Últimos 2 dígitos\nconst currentMonth=currentDate.getMonth()+1;const expYear=parseInt(year,10);const expMonth=parseInt(month,10);// Validar que no esté expirada\nif(expYear<currentYear||expYear===currentYear&&expMonth<currentMonth){return false;}return true;};/**\n * Validar CVV\n */export const validateCVV=cvv=>{// CVV debe ser 3 o 4 dígitos\nconst regex=/^\\d{3,4}$/;return regex.test(cvv);};/**\n * Obtener tipo de tarjeta basado en el número\n */export const getCardType=cardNumber=>{const cleaned=cardNumber.replace(/[\\s-]/g,'');// Visa\nif(/^4/.test(cleaned)){return'visa';}// Mastercard\nif(/^5[1-5]/.test(cleaned)||/^2[2-7]/.test(cleaned)){return'mastercard';}// American Express\nif(/^3[47]/.test(cleaned)){return'amex';}// Diners Club\nif(/^3(?:0[0-5]|[68])/.test(cleaned)){return'diners';}return'unknown';};/**\n * Formatear número de tarjeta (enmascara todos excepto últimos 4 dígitos)\n */export const maskCardNumber=cardNumber=>{const cleaned=cardNumber.replace(/[\\s-]/g,'');const lastFour=cleaned.slice(-4);return\"**** **** **** \".concat(lastFour);};/**\n * Procesar pago con tarjeta (DEMO)\n * En producción, esto se comunicaría con la API de la pasarela de pago\n */export const processCardPayment=async paymentData=>{const{cardNumber,cardName,expirationDate,cvv,amount}=paymentData;// Validaciones\nif(!validateCardNumber(cardNumber)){return{success:false,error:'Número de tarjeta inválido'};}if(!validateExpirationDate(expirationDate)){return{success:false,error:'Fecha de expiración inválida o tarjeta expirada'};}if(!validateCVV(cvv)){return{success:false,error:'CVV inválido'};}// Simular delay de procesamiento (en producción sería una llamada API real)\nawait new Promise(resolve=>setTimeout(resolve,2000));// DEMO: Simular éxito (90% de probabilidad)\nconst isSuccess=Math.random()>0.1;if(isSuccess){return{success:true,transactionId:\"TXN-\".concat(Date.now(),\"-\").concat(Math.random().toString(36).substr(2,9)),amount,cardType:getCardType(cardNumber),maskedCard:maskCardNumber(cardNumber),timestamp:new Date().toISOString()};}else{return{success:false,error:'Pago rechazado. Por favor, intenta con otra tarjeta.'};}};/**\n * Procesar pago con Yape/Plin (DEMO)\n * En producción, generarías un QR o redirigirías a la app\n */export const processDigitalWalletPayment=async(paymentMethod,amount,phoneNumber)=>{// Validar número de teléfono peruano\nconst phoneRegex=/^9\\d{8}$/;if(phoneNumber&&!phoneRegex.test(phoneNumber)){return{success:false,error:'Número de teléfono inválido'};}// Simular delay\nawait new Promise(resolve=>setTimeout(resolve,1500));return{success:true,transactionId:\"\".concat(paymentMethod.toUpperCase(),\"-\").concat(Date.now()),amount,paymentMethod,phoneNumber,timestamp:new Date().toISOString(),qrCode:\"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=\".concat(paymentMethod,\"-payment-\").concat(Date.now())};};/**\n * Validar datos de pago completos\n */export const validatePaymentData=formData=>{const errors={};if(formData.metodoPago==='tarjeta'){if(!formData.numeroTarjeta||!validateCardNumber(formData.numeroTarjeta)){errors.numeroTarjeta='Número de tarjeta inválido';}if(!formData.nombreTarjeta||formData.nombreTarjeta.trim().length<3){errors.nombreTarjeta='Nombre en tarjeta inválido';}if(!formData.fechaExpiracion||!validateExpirationDate(formData.fechaExpiracion)){errors.fechaExpiracion='Fecha de expiración inválida';}if(!formData.cvv||!validateCVV(formData.cvv)){errors.cvv='CVV inválido';}}return{isValid:Object.keys(errors).length===0,errors};};","map":{"version":3,"names":["validateCardNumber","cardNumber","cleaned","replace","test","length","sum","isEven","i","digit","parseInt","charAt","validateExpirationDate","expDate","regex","month","year","split","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","expYear","expMonth","validateCVV","cvv","getCardType","maskCardNumber","lastFour","slice","concat","processCardPayment","paymentData","cardName","expirationDate","amount","success","error","Promise","resolve","setTimeout","isSuccess","Math","random","transactionId","now","toString","substr","cardType","maskedCard","timestamp","toISOString","processDigitalWalletPayment","paymentMethod","phoneNumber","phoneRegex","toUpperCase","qrCode","validatePaymentData","formData","errors","metodoPago","numeroTarjeta","nombreTarjeta","trim","fechaExpiracion","isValid","Object","keys"],"sources":["C:/Users/Usuario/OneDrive/Desktop/proyecto/chinasaqra-demo/src/services/paymentService.js"],"sourcesContent":["/**\n * Payment Service - Manejo de pagos\n *\n * NOTA: Esta es una implementación de DEMO.\n * Para producción, debes integrar una pasarela de pago real como:\n * - Niubiz (VisaNet Perú)\n * - Culqi (Perú)\n * - Stripe (Internacional)\n * - PayPal\n */\n\n/**\n * Validar número de tarjeta usando algoritmo de Luhn\n */\nexport const validateCardNumber = (cardNumber) => {\n  // Remover espacios y guiones\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n\n  // Validar que solo sean números\n  if (!/^\\d+$/.test(cleaned)) {\n    return false;\n  }\n\n  // Validar longitud (13-19 dígitos)\n  if (cleaned.length < 13 || cleaned.length > 19) {\n    return false;\n  }\n\n  // Algoritmo de Luhn\n  let sum = 0;\n  let isEven = false;\n\n  for (let i = cleaned.length - 1; i >= 0; i--) {\n    let digit = parseInt(cleaned.charAt(i), 10);\n\n    if (isEven) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n\n    sum += digit;\n    isEven = !isEven;\n  }\n\n  return sum % 10 === 0;\n};\n\n/**\n * Validar fecha de expiración\n */\nexport const validateExpirationDate = (expDate) => {\n  // Formato esperado: MM/AA\n  const regex = /^(0[1-9]|1[0-2])\\/(\\d{2})$/;\n\n  if (!regex.test(expDate)) {\n    return false;\n  }\n\n  const [month, year] = expDate.split('/');\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear() % 100; // Últimos 2 dígitos\n  const currentMonth = currentDate.getMonth() + 1;\n\n  const expYear = parseInt(year, 10);\n  const expMonth = parseInt(month, 10);\n\n  // Validar que no esté expirada\n  if (expYear < currentYear || (expYear === currentYear && expMonth < currentMonth)) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Validar CVV\n */\nexport const validateCVV = (cvv) => {\n  // CVV debe ser 3 o 4 dígitos\n  const regex = /^\\d{3,4}$/;\n  return regex.test(cvv);\n};\n\n/**\n * Obtener tipo de tarjeta basado en el número\n */\nexport const getCardType = (cardNumber) => {\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n\n  // Visa\n  if (/^4/.test(cleaned)) {\n    return 'visa';\n  }\n\n  // Mastercard\n  if (/^5[1-5]/.test(cleaned) || /^2[2-7]/.test(cleaned)) {\n    return 'mastercard';\n  }\n\n  // American Express\n  if (/^3[47]/.test(cleaned)) {\n    return 'amex';\n  }\n\n  // Diners Club\n  if (/^3(?:0[0-5]|[68])/.test(cleaned)) {\n    return 'diners';\n  }\n\n  return 'unknown';\n};\n\n/**\n * Formatear número de tarjeta (enmascara todos excepto últimos 4 dígitos)\n */\nexport const maskCardNumber = (cardNumber) => {\n  const cleaned = cardNumber.replace(/[\\s-]/g, '');\n  const lastFour = cleaned.slice(-4);\n  return `**** **** **** ${lastFour}`;\n};\n\n/**\n * Procesar pago con tarjeta (DEMO)\n * En producción, esto se comunicaría con la API de la pasarela de pago\n */\nexport const processCardPayment = async (paymentData) => {\n  const { cardNumber, cardName, expirationDate, cvv, amount } = paymentData;\n\n  // Validaciones\n  if (!validateCardNumber(cardNumber)) {\n    return {\n      success: false,\n      error: 'Número de tarjeta inválido'\n    };\n  }\n\n  if (!validateExpirationDate(expirationDate)) {\n    return {\n      success: false,\n      error: 'Fecha de expiración inválida o tarjeta expirada'\n    };\n  }\n\n  if (!validateCVV(cvv)) {\n    return {\n      success: false,\n      error: 'CVV inválido'\n    };\n  }\n\n  // Simular delay de procesamiento (en producción sería una llamada API real)\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // DEMO: Simular éxito (90% de probabilidad)\n  const isSuccess = Math.random() > 0.1;\n\n  if (isSuccess) {\n    return {\n      success: true,\n      transactionId: `TXN-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      amount,\n      cardType: getCardType(cardNumber),\n      maskedCard: maskCardNumber(cardNumber),\n      timestamp: new Date().toISOString()\n    };\n  } else {\n    return {\n      success: false,\n      error: 'Pago rechazado. Por favor, intenta con otra tarjeta.'\n    };\n  }\n};\n\n/**\n * Procesar pago con Yape/Plin (DEMO)\n * En producción, generarías un QR o redirigirías a la app\n */\nexport const processDigitalWalletPayment = async (paymentMethod, amount, phoneNumber) => {\n  // Validar número de teléfono peruano\n  const phoneRegex = /^9\\d{8}$/;\n\n  if (phoneNumber && !phoneRegex.test(phoneNumber)) {\n    return {\n      success: false,\n      error: 'Número de teléfono inválido'\n    };\n  }\n\n  // Simular delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  return {\n    success: true,\n    transactionId: `${paymentMethod.toUpperCase()}-${Date.now()}`,\n    amount,\n    paymentMethod,\n    phoneNumber,\n    timestamp: new Date().toISOString(),\n    qrCode: `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${paymentMethod}-payment-${Date.now()}`\n  };\n};\n\n/**\n * Validar datos de pago completos\n */\nexport const validatePaymentData = (formData) => {\n  const errors = {};\n\n  if (formData.metodoPago === 'tarjeta') {\n    if (!formData.numeroTarjeta || !validateCardNumber(formData.numeroTarjeta)) {\n      errors.numeroTarjeta = 'Número de tarjeta inválido';\n    }\n\n    if (!formData.nombreTarjeta || formData.nombreTarjeta.trim().length < 3) {\n      errors.nombreTarjeta = 'Nombre en tarjeta inválido';\n    }\n\n    if (!formData.fechaExpiracion || !validateExpirationDate(formData.fechaExpiracion)) {\n      errors.fechaExpiracion = 'Fecha de expiración inválida';\n    }\n\n    if (!formData.cvv || !validateCVV(formData.cvv)) {\n      errors.cvv = 'CVV inválido';\n    }\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}