{"ast":null,"code":"import { supabase } from '../config/supabase';\nimport { incrementProductSales, updateProductStock } from './productService';\n\n// Crear una nueva orden\nexport const createOrder = async orderData => {\n  try {\n    const {\n      user_id,\n      items,\n      shipping,\n      payment,\n      subtotal,\n      shipping_cost,\n      total\n    } = orderData;\n\n    // Generar número de orden único\n    const orderNumber = `CHI-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n    // Crear la orden\n    const {\n      data: order,\n      error: orderError\n    } = await supabase.from('orders').insert([{\n      user_id: user_id || null,\n      order_number: orderNumber,\n      status: 'pending',\n      subtotal,\n      shipping_cost,\n      total,\n      shipping_name: shipping.full_name,\n      shipping_email: shipping.email,\n      shipping_phone: shipping.phone,\n      shipping_address: shipping.address,\n      shipping_city: shipping.city,\n      shipping_state: shipping.state,\n      shipping_postal_code: shipping.postal_code || '',\n      payment_method: payment.method,\n      payment_status: payment.status || 'pending',\n      payment_transaction_id: payment.transaction_id || null\n    }]).select().single();\n    if (orderError) throw orderError;\n\n    // Crear items de la orden\n    const orderItems = items.map(item => ({\n      order_id: order.id,\n      product_id: item.id,\n      product_name: item.name,\n      product_price: item.price,\n      quantity: item.quantity,\n      size: item.size || null,\n      color: item.color || null\n    }));\n    const {\n      error: itemsError\n    } = await supabase.from('order_items').insert(orderItems);\n    if (itemsError) throw itemsError;\n\n    // Actualizar stock y ventas de productos\n    for (const item of items) {\n      await updateProductStock(item.id, item.quantity);\n      await incrementProductSales(item.id, item.quantity);\n    }\n    return {\n      data: order,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error: error.message\n    };\n  }\n};\n\n// Obtener orden por ID\nexport const getOrderById = async orderId => {\n  try {\n    const {\n      data: order,\n      error: orderError\n    } = await supabase.from('orders').select('*').eq('id', orderId).single();\n    if (orderError) throw orderError;\n\n    // Obtener items de la orden\n    const {\n      data: items,\n      error: itemsError\n    } = await supabase.from('order_items').select('*').eq('order_id', orderId);\n    if (itemsError) throw itemsError;\n    return {\n      data: {\n        ...order,\n        items\n      },\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error: error.message\n    };\n  }\n};\n\n// Obtener orden por número de orden\nexport const getOrderByNumber = async orderNumber => {\n  try {\n    const {\n      data: order,\n      error: orderError\n    } = await supabase.from('orders').select('*').eq('order_number', orderNumber).single();\n    if (orderError) throw orderError;\n\n    // Obtener items de la orden\n    const {\n      data: items,\n      error: itemsError\n    } = await supabase.from('order_items').select('*').eq('order_id', order.id);\n    if (itemsError) throw itemsError;\n    return {\n      data: {\n        ...order,\n        items\n      },\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error: error.message\n    };\n  }\n};\n\n// Obtener órdenes de un usuario\nexport const getUserOrders = async userId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('orders').select(`\n        *,\n        order_items (*)\n      `).eq('user_id', userId).order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error: error.message\n    };\n  }\n};\n\n// Actualizar estado de orden\nexport const updateOrderStatus = async (orderId, status) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('orders').update({\n      status\n    }).eq('id', orderId).select().single();\n    if (error) throw error;\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error: error.message\n    };\n  }\n};\n\n// Actualizar estado de pago\nexport const updatePaymentStatus = async (orderId, paymentStatus) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('orders').update({\n      payment_status: paymentStatus\n    }).eq('id', orderId).select().single();\n    if (error) throw error;\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error: error.message\n    };\n  }\n};\n\n// Cancelar orden\nexport const cancelOrder = async orderId => {\n  try {\n    // Obtener la orden y sus items\n    const {\n      data: orderData\n    } = await getOrderById(orderId);\n    if (!orderData) throw new Error('Orden no encontrada');\n\n    // Actualizar estado\n    const {\n      data,\n      error\n    } = await supabase.from('orders').update({\n      status: 'cancelled'\n    }).eq('id', orderId).select().single();\n    if (error) throw error;\n\n    // Restaurar stock de productos (opcional)\n    // for (const item of orderData.items) {\n    //   await updateProductStock(item.product_id, -item.quantity);\n    // }\n\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["supabase","incrementProductSales","updateProductStock","createOrder","orderData","user_id","items","shipping","payment","subtotal","shipping_cost","total","orderNumber","Date","now","Math","floor","random","data","order","error","orderError","from","insert","order_number","status","shipping_name","full_name","shipping_email","email","shipping_phone","phone","shipping_address","address","shipping_city","city","shipping_state","state","shipping_postal_code","postal_code","payment_method","method","payment_status","payment_transaction_id","transaction_id","select","single","orderItems","map","item","order_id","id","product_id","product_name","name","product_price","price","quantity","size","color","itemsError","message","getOrderById","orderId","eq","getOrderByNumber","getUserOrders","userId","ascending","updateOrderStatus","update","updatePaymentStatus","paymentStatus","cancelOrder","Error"],"sources":["C:/Users/Usuario/OneDrive/Desktop/proyecto/chinasaqra-demo/src/services/orderService.js"],"sourcesContent":["import { supabase } from '../config/supabase';\nimport { incrementProductSales, updateProductStock } from './productService';\n\n// Crear una nueva orden\nexport const createOrder = async (orderData) => {\n  try {\n    const { user_id, items, shipping, payment, subtotal, shipping_cost, total } = orderData;\n\n    // Generar número de orden único\n    const orderNumber = `CHI-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n    // Crear la orden\n    const { data: order, error: orderError } = await supabase\n      .from('orders')\n      .insert([\n        {\n          user_id: user_id || null,\n          order_number: orderNumber,\n          status: 'pending',\n          subtotal,\n          shipping_cost,\n          total,\n          shipping_name: shipping.full_name,\n          shipping_email: shipping.email,\n          shipping_phone: shipping.phone,\n          shipping_address: shipping.address,\n          shipping_city: shipping.city,\n          shipping_state: shipping.state,\n          shipping_postal_code: shipping.postal_code || '',\n          payment_method: payment.method,\n          payment_status: payment.status || 'pending',\n          payment_transaction_id: payment.transaction_id || null\n        }\n      ])\n      .select()\n      .single();\n\n    if (orderError) throw orderError;\n\n    // Crear items de la orden\n    const orderItems = items.map(item => ({\n      order_id: order.id,\n      product_id: item.id,\n      product_name: item.name,\n      product_price: item.price,\n      quantity: item.quantity,\n      size: item.size || null,\n      color: item.color || null\n    }));\n\n    const { error: itemsError } = await supabase\n      .from('order_items')\n      .insert(orderItems);\n\n    if (itemsError) throw itemsError;\n\n    // Actualizar stock y ventas de productos\n    for (const item of items) {\n      await updateProductStock(item.id, item.quantity);\n      await incrementProductSales(item.id, item.quantity);\n    }\n\n    return { data: order, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Obtener orden por ID\nexport const getOrderById = async (orderId) => {\n  try {\n    const { data: order, error: orderError } = await supabase\n      .from('orders')\n      .select('*')\n      .eq('id', orderId)\n      .single();\n\n    if (orderError) throw orderError;\n\n    // Obtener items de la orden\n    const { data: items, error: itemsError } = await supabase\n      .from('order_items')\n      .select('*')\n      .eq('order_id', orderId);\n\n    if (itemsError) throw itemsError;\n\n    return { data: { ...order, items }, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Obtener orden por número de orden\nexport const getOrderByNumber = async (orderNumber) => {\n  try {\n    const { data: order, error: orderError } = await supabase\n      .from('orders')\n      .select('*')\n      .eq('order_number', orderNumber)\n      .single();\n\n    if (orderError) throw orderError;\n\n    // Obtener items de la orden\n    const { data: items, error: itemsError } = await supabase\n      .from('order_items')\n      .select('*')\n      .eq('order_id', order.id);\n\n    if (itemsError) throw itemsError;\n\n    return { data: { ...order, items }, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Obtener órdenes de un usuario\nexport const getUserOrders = async (userId) => {\n  try {\n    const { data, error } = await supabase\n      .from('orders')\n      .select(`\n        *,\n        order_items (*)\n      `)\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Actualizar estado de orden\nexport const updateOrderStatus = async (orderId, status) => {\n  try {\n    const { data, error } = await supabase\n      .from('orders')\n      .update({ status })\n      .eq('id', orderId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Actualizar estado de pago\nexport const updatePaymentStatus = async (orderId, paymentStatus) => {\n  try {\n    const { data, error } = await supabase\n      .from('orders')\n      .update({ payment_status: paymentStatus })\n      .eq('id', orderId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Cancelar orden\nexport const cancelOrder = async (orderId) => {\n  try {\n    // Obtener la orden y sus items\n    const { data: orderData } = await getOrderById(orderId);\n    if (!orderData) throw new Error('Orden no encontrada');\n\n    // Actualizar estado\n    const { data, error } = await supabase\n      .from('orders')\n      .update({ status: 'cancelled' })\n      .eq('id', orderId)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    // Restaurar stock de productos (opcional)\n    // for (const item of orderData.items) {\n    //   await updateProductStock(item.product_id, -item.quantity);\n    // }\n\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}