{"ast":null,"code":"import _objectSpread from\"C:/Users/Usuario/OneDrive/Desktop/proyecto/chinasaqra-demo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{supabase}from'../config/supabase';import{incrementProductSales,updateProductStock}from'./productService';// Crear una nueva orden\nexport const createOrder=async orderData=>{try{const{user_id,items,shipping,payment,subtotal,shipping_cost,total}=orderData;// Generar número de orden único\nconst orderNumber=\"CHI-\".concat(Date.now(),\"-\").concat(Math.floor(Math.random()*1000));// Crear la orden\nconst{data:order,error:orderError}=await supabase.from('orders').insert([{user_id:user_id||null,order_number:orderNumber,status:'pending',subtotal,shipping_cost,total,shipping_name:shipping.full_name,shipping_email:shipping.email,shipping_phone:shipping.phone,shipping_address:shipping.address,shipping_city:shipping.city,shipping_state:shipping.state,shipping_postal_code:shipping.postal_code||'',payment_method:payment.method,payment_status:'pending'}]).select().single();if(orderError)throw orderError;// Crear items de la orden\nconst orderItems=items.map(item=>({order_id:order.id,product_id:item.id,product_name:item.name,product_price:item.price,quantity:item.quantity,size:item.size||null,color:item.color||null}));const{error:itemsError}=await supabase.from('order_items').insert(orderItems);if(itemsError)throw itemsError;// Actualizar stock y ventas de productos\nfor(const item of items){await updateProductStock(item.id,item.quantity);await incrementProductSales(item.id,item.quantity);}return{data:order,error:null};}catch(error){return{data:null,error:error.message};}};// Obtener orden por ID\nexport const getOrderById=async orderId=>{try{const{data:order,error:orderError}=await supabase.from('orders').select('*').eq('id',orderId).single();if(orderError)throw orderError;// Obtener items de la orden\nconst{data:items,error:itemsError}=await supabase.from('order_items').select('*').eq('order_id',orderId);if(itemsError)throw itemsError;return{data:_objectSpread(_objectSpread({},order),{},{items}),error:null};}catch(error){return{data:null,error:error.message};}};// Obtener orden por número de orden\nexport const getOrderByNumber=async orderNumber=>{try{const{data:order,error:orderError}=await supabase.from('orders').select('*').eq('order_number',orderNumber).single();if(orderError)throw orderError;// Obtener items de la orden\nconst{data:items,error:itemsError}=await supabase.from('order_items').select('*').eq('order_id',order.id);if(itemsError)throw itemsError;return{data:_objectSpread(_objectSpread({},order),{},{items}),error:null};}catch(error){return{data:null,error:error.message};}};// Obtener órdenes de un usuario\nexport const getUserOrders=async userId=>{try{const{data,error}=await supabase.from('orders').select(\"\\n        *,\\n        order_items (*)\\n      \").eq('user_id',userId).order('created_at',{ascending:false});if(error)throw error;return{data,error:null};}catch(error){return{data:null,error:error.message};}};// Actualizar estado de orden\nexport const updateOrderStatus=async(orderId,status)=>{try{const{data,error}=await supabase.from('orders').update({status}).eq('id',orderId).select().single();if(error)throw error;return{data,error:null};}catch(error){return{data:null,error:error.message};}};// Actualizar estado de pago\nexport const updatePaymentStatus=async(orderId,paymentStatus)=>{try{const{data,error}=await supabase.from('orders').update({payment_status:paymentStatus}).eq('id',orderId).select().single();if(error)throw error;return{data,error:null};}catch(error){return{data:null,error:error.message};}};// Cancelar orden\nexport const cancelOrder=async orderId=>{try{// Obtener la orden y sus items\nconst{data:orderData}=await getOrderById(orderId);if(!orderData)throw new Error('Orden no encontrada');// Actualizar estado\nconst{data,error}=await supabase.from('orders').update({status:'cancelled'}).eq('id',orderId).select().single();if(error)throw error;// Restaurar stock de productos (opcional)\n// for (const item of orderData.items) {\n//   await updateProductStock(item.product_id, -item.quantity);\n// }\nreturn{data,error:null};}catch(error){return{data:null,error:error.message};}};","map":{"version":3,"names":["supabase","incrementProductSales","updateProductStock","createOrder","orderData","user_id","items","shipping","payment","subtotal","shipping_cost","total","orderNumber","concat","Date","now","Math","floor","random","data","order","error","orderError","from","insert","order_number","status","shipping_name","full_name","shipping_email","email","shipping_phone","phone","shipping_address","address","shipping_city","city","shipping_state","state","shipping_postal_code","postal_code","payment_method","method","payment_status","select","single","orderItems","map","item","order_id","id","product_id","product_name","name","product_price","price","quantity","size","color","itemsError","message","getOrderById","orderId","eq","_objectSpread","getOrderByNumber","getUserOrders","userId","ascending","updateOrderStatus","update","updatePaymentStatus","paymentStatus","cancelOrder","Error"],"sources":["C:/Users/Usuario/OneDrive/Desktop/proyecto/chinasaqra-demo/src/services/orderService.js"],"sourcesContent":["import { supabase } from '../config/supabase';\nimport { incrementProductSales, updateProductStock } from './productService';\n\n// Crear una nueva orden\nexport const createOrder = async (orderData) => {\n  try {\n    const { user_id, items, shipping, payment, subtotal, shipping_cost, total } = orderData;\n\n    // Generar número de orden único\n    const orderNumber = `CHI-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n    // Crear la orden\n    const { data: order, error: orderError } = await supabase\n      .from('orders')\n      .insert([\n        {\n          user_id: user_id || null,\n          order_number: orderNumber,\n          status: 'pending',\n          subtotal,\n          shipping_cost,\n          total,\n          shipping_name: shipping.full_name,\n          shipping_email: shipping.email,\n          shipping_phone: shipping.phone,\n          shipping_address: shipping.address,\n          shipping_city: shipping.city,\n          shipping_state: shipping.state,\n          shipping_postal_code: shipping.postal_code || '',\n          payment_method: payment.method,\n          payment_status: 'pending'\n        }\n      ])\n      .select()\n      .single();\n\n    if (orderError) throw orderError;\n\n    // Crear items de la orden\n    const orderItems = items.map(item => ({\n      order_id: order.id,\n      product_id: item.id,\n      product_name: item.name,\n      product_price: item.price,\n      quantity: item.quantity,\n      size: item.size || null,\n      color: item.color || null\n    }));\n\n    const { error: itemsError } = await supabase\n      .from('order_items')\n      .insert(orderItems);\n\n    if (itemsError) throw itemsError;\n\n    // Actualizar stock y ventas de productos\n    for (const item of items) {\n      await updateProductStock(item.id, item.quantity);\n      await incrementProductSales(item.id, item.quantity);\n    }\n\n    return { data: order, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Obtener orden por ID\nexport const getOrderById = async (orderId) => {\n  try {\n    const { data: order, error: orderError } = await supabase\n      .from('orders')\n      .select('*')\n      .eq('id', orderId)\n      .single();\n\n    if (orderError) throw orderError;\n\n    // Obtener items de la orden\n    const { data: items, error: itemsError } = await supabase\n      .from('order_items')\n      .select('*')\n      .eq('order_id', orderId);\n\n    if (itemsError) throw itemsError;\n\n    return { data: { ...order, items }, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Obtener orden por número de orden\nexport const getOrderByNumber = async (orderNumber) => {\n  try {\n    const { data: order, error: orderError } = await supabase\n      .from('orders')\n      .select('*')\n      .eq('order_number', orderNumber)\n      .single();\n\n    if (orderError) throw orderError;\n\n    // Obtener items de la orden\n    const { data: items, error: itemsError } = await supabase\n      .from('order_items')\n      .select('*')\n      .eq('order_id', order.id);\n\n    if (itemsError) throw itemsError;\n\n    return { data: { ...order, items }, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Obtener órdenes de un usuario\nexport const getUserOrders = async (userId) => {\n  try {\n    const { data, error } = await supabase\n      .from('orders')\n      .select(`\n        *,\n        order_items (*)\n      `)\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Actualizar estado de orden\nexport const updateOrderStatus = async (orderId, status) => {\n  try {\n    const { data, error } = await supabase\n      .from('orders')\n      .update({ status })\n      .eq('id', orderId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Actualizar estado de pago\nexport const updatePaymentStatus = async (orderId, paymentStatus) => {\n  try {\n    const { data, error } = await supabase\n      .from('orders')\n      .update({ payment_status: paymentStatus })\n      .eq('id', orderId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n\n// Cancelar orden\nexport const cancelOrder = async (orderId) => {\n  try {\n    // Obtener la orden y sus items\n    const { data: orderData } = await getOrderById(orderId);\n    if (!orderData) throw new Error('Orden no encontrada');\n\n    // Actualizar estado\n    const { data, error } = await supabase\n      .from('orders')\n      .update({ status: 'cancelled' })\n      .eq('id', orderId)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    // Restaurar stock de productos (opcional)\n    // for (const item of orderData.items) {\n    //   await updateProductStock(item.product_id, -item.quantity);\n    // }\n\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error.message };\n  }\n};\n"],"mappings":"+IAAA,OAASA,QAAQ,KAAQ,oBAAoB,CAC7C,OAASC,qBAAqB,CAAEC,kBAAkB,KAAQ,kBAAkB,CAE5E;AACA,MAAO,MAAM,CAAAC,WAAW,CAAG,KAAO,CAAAC,SAAS,EAAK,CAC9C,GAAI,CACF,KAAM,CAAEC,OAAO,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,OAAO,CAAEC,QAAQ,CAAEC,aAAa,CAAEC,KAAM,CAAC,CAAGP,SAAS,CAEvF;AACA,KAAM,CAAAQ,WAAW,QAAAC,MAAA,CAAUC,IAAI,CAACC,GAAG,CAAC,CAAC,MAAAF,MAAA,CAAIG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,IAAI,CAAC,CAAE,CAE3E;AACA,KAAM,CAAEC,IAAI,CAAEC,KAAK,CAAEC,KAAK,CAAEC,UAAW,CAAC,CAAG,KAAM,CAAAtB,QAAQ,CACtDuB,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,CACN,CACEnB,OAAO,CAAEA,OAAO,EAAI,IAAI,CACxBoB,YAAY,CAAEb,WAAW,CACzBc,MAAM,CAAE,SAAS,CACjBjB,QAAQ,CACRC,aAAa,CACbC,KAAK,CACLgB,aAAa,CAAEpB,QAAQ,CAACqB,SAAS,CACjCC,cAAc,CAAEtB,QAAQ,CAACuB,KAAK,CAC9BC,cAAc,CAAExB,QAAQ,CAACyB,KAAK,CAC9BC,gBAAgB,CAAE1B,QAAQ,CAAC2B,OAAO,CAClCC,aAAa,CAAE5B,QAAQ,CAAC6B,IAAI,CAC5BC,cAAc,CAAE9B,QAAQ,CAAC+B,KAAK,CAC9BC,oBAAoB,CAAEhC,QAAQ,CAACiC,WAAW,EAAI,EAAE,CAChDC,cAAc,CAAEjC,OAAO,CAACkC,MAAM,CAC9BC,cAAc,CAAE,SAClB,CAAC,CACF,CAAC,CACDC,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC,CAEX,GAAIvB,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC;AACA,KAAM,CAAAwB,UAAU,CAAGxC,KAAK,CAACyC,GAAG,CAACC,IAAI,GAAK,CACpCC,QAAQ,CAAE7B,KAAK,CAAC8B,EAAE,CAClBC,UAAU,CAAEH,IAAI,CAACE,EAAE,CACnBE,YAAY,CAAEJ,IAAI,CAACK,IAAI,CACvBC,aAAa,CAAEN,IAAI,CAACO,KAAK,CACzBC,QAAQ,CAAER,IAAI,CAACQ,QAAQ,CACvBC,IAAI,CAAET,IAAI,CAACS,IAAI,EAAI,IAAI,CACvBC,KAAK,CAAEV,IAAI,CAACU,KAAK,EAAI,IACvB,CAAC,CAAC,CAAC,CAEH,KAAM,CAAErC,KAAK,CAAEsC,UAAW,CAAC,CAAG,KAAM,CAAA3D,QAAQ,CACzCuB,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAACsB,UAAU,CAAC,CAErB,GAAIa,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC;AACA,IAAK,KAAM,CAAAX,IAAI,GAAI,CAAA1C,KAAK,CAAE,CACxB,KAAM,CAAAJ,kBAAkB,CAAC8C,IAAI,CAACE,EAAE,CAAEF,IAAI,CAACQ,QAAQ,CAAC,CAChD,KAAM,CAAAvD,qBAAqB,CAAC+C,IAAI,CAACE,EAAE,CAAEF,IAAI,CAACQ,QAAQ,CAAC,CACrD,CAEA,MAAO,CAAErC,IAAI,CAAEC,KAAK,CAAEC,KAAK,CAAE,IAAK,CAAC,CACrC,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAEF,IAAI,CAAE,IAAI,CAAEE,KAAK,CAAEA,KAAK,CAACuC,OAAQ,CAAC,CAC7C,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,OAAO,EAAK,CAC7C,GAAI,CACF,KAAM,CAAE3C,IAAI,CAAEC,KAAK,CAAEC,KAAK,CAAEC,UAAW,CAAC,CAAG,KAAM,CAAAtB,QAAQ,CACtDuB,IAAI,CAAC,QAAQ,CAAC,CACdqB,MAAM,CAAC,GAAG,CAAC,CACXmB,EAAE,CAAC,IAAI,CAAED,OAAO,CAAC,CACjBjB,MAAM,CAAC,CAAC,CAEX,GAAIvB,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC;AACA,KAAM,CAAEH,IAAI,CAAEb,KAAK,CAAEe,KAAK,CAAEsC,UAAW,CAAC,CAAG,KAAM,CAAA3D,QAAQ,CACtDuB,IAAI,CAAC,aAAa,CAAC,CACnBqB,MAAM,CAAC,GAAG,CAAC,CACXmB,EAAE,CAAC,UAAU,CAAED,OAAO,CAAC,CAE1B,GAAIH,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC,MAAO,CAAExC,IAAI,CAAA6C,aAAA,CAAAA,aAAA,IAAO5C,KAAK,MAAEd,KAAK,EAAE,CAAEe,KAAK,CAAE,IAAK,CAAC,CACnD,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAEF,IAAI,CAAE,IAAI,CAAEE,KAAK,CAAEA,KAAK,CAACuC,OAAQ,CAAC,CAC7C,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,gBAAgB,CAAG,KAAO,CAAArD,WAAW,EAAK,CACrD,GAAI,CACF,KAAM,CAAEO,IAAI,CAAEC,KAAK,CAAEC,KAAK,CAAEC,UAAW,CAAC,CAAG,KAAM,CAAAtB,QAAQ,CACtDuB,IAAI,CAAC,QAAQ,CAAC,CACdqB,MAAM,CAAC,GAAG,CAAC,CACXmB,EAAE,CAAC,cAAc,CAAEnD,WAAW,CAAC,CAC/BiC,MAAM,CAAC,CAAC,CAEX,GAAIvB,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC;AACA,KAAM,CAAEH,IAAI,CAAEb,KAAK,CAAEe,KAAK,CAAEsC,UAAW,CAAC,CAAG,KAAM,CAAA3D,QAAQ,CACtDuB,IAAI,CAAC,aAAa,CAAC,CACnBqB,MAAM,CAAC,GAAG,CAAC,CACXmB,EAAE,CAAC,UAAU,CAAE3C,KAAK,CAAC8B,EAAE,CAAC,CAE3B,GAAIS,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC,MAAO,CAAExC,IAAI,CAAA6C,aAAA,CAAAA,aAAA,IAAO5C,KAAK,MAAEd,KAAK,EAAE,CAAEe,KAAK,CAAE,IAAK,CAAC,CACnD,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAEF,IAAI,CAAE,IAAI,CAAEE,KAAK,CAAEA,KAAK,CAACuC,OAAQ,CAAC,CAC7C,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,aAAa,CAAG,KAAO,CAAAC,MAAM,EAAK,CAC7C,GAAI,CACF,KAAM,CAAEhD,IAAI,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAArB,QAAQ,CACnCuB,IAAI,CAAC,QAAQ,CAAC,CACdqB,MAAM,gDAGN,CAAC,CACDmB,EAAE,CAAC,SAAS,CAAEI,MAAM,CAAC,CACrB/C,KAAK,CAAC,YAAY,CAAE,CAAEgD,SAAS,CAAE,KAAM,CAAC,CAAC,CAE5C,GAAI/C,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtB,MAAO,CAAEF,IAAI,CAAEE,KAAK,CAAE,IAAK,CAAC,CAC9B,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAEF,IAAI,CAAE,IAAI,CAAEE,KAAK,CAAEA,KAAK,CAACuC,OAAQ,CAAC,CAC7C,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAS,iBAAiB,CAAG,KAAAA,CAAOP,OAAO,CAAEpC,MAAM,GAAK,CAC1D,GAAI,CACF,KAAM,CAAEP,IAAI,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAArB,QAAQ,CACnCuB,IAAI,CAAC,QAAQ,CAAC,CACd+C,MAAM,CAAC,CAAE5C,MAAO,CAAC,CAAC,CAClBqC,EAAE,CAAC,IAAI,CAAED,OAAO,CAAC,CACjBlB,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC,CAEX,GAAIxB,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtB,MAAO,CAAEF,IAAI,CAAEE,KAAK,CAAE,IAAK,CAAC,CAC9B,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAEF,IAAI,CAAE,IAAI,CAAEE,KAAK,CAAEA,KAAK,CAACuC,OAAQ,CAAC,CAC7C,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAW,mBAAmB,CAAG,KAAAA,CAAOT,OAAO,CAAEU,aAAa,GAAK,CACnE,GAAI,CACF,KAAM,CAAErD,IAAI,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAArB,QAAQ,CACnCuB,IAAI,CAAC,QAAQ,CAAC,CACd+C,MAAM,CAAC,CAAE3B,cAAc,CAAE6B,aAAc,CAAC,CAAC,CACzCT,EAAE,CAAC,IAAI,CAAED,OAAO,CAAC,CACjBlB,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC,CAEX,GAAIxB,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtB,MAAO,CAAEF,IAAI,CAAEE,KAAK,CAAE,IAAK,CAAC,CAC9B,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAEF,IAAI,CAAE,IAAI,CAAEE,KAAK,CAAEA,KAAK,CAACuC,OAAQ,CAAC,CAC7C,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,WAAW,CAAG,KAAO,CAAAX,OAAO,EAAK,CAC5C,GAAI,CACF;AACA,KAAM,CAAE3C,IAAI,CAAEf,SAAU,CAAC,CAAG,KAAM,CAAAyD,YAAY,CAACC,OAAO,CAAC,CACvD,GAAI,CAAC1D,SAAS,CAAE,KAAM,IAAI,CAAAsE,KAAK,CAAC,qBAAqB,CAAC,CAEtD;AACA,KAAM,CAAEvD,IAAI,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAArB,QAAQ,CACnCuB,IAAI,CAAC,QAAQ,CAAC,CACd+C,MAAM,CAAC,CAAE5C,MAAM,CAAE,WAAY,CAAC,CAAC,CAC/BqC,EAAE,CAAC,IAAI,CAAED,OAAO,CAAC,CACjBlB,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC,CAEX,GAAIxB,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtB;AACA;AACA;AACA;AAEA,MAAO,CAAEF,IAAI,CAAEE,KAAK,CAAE,IAAK,CAAC,CAC9B,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAEF,IAAI,CAAE,IAAI,CAAEE,KAAK,CAAEA,KAAK,CAACuC,OAAQ,CAAC,CAC7C,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}